name: Reusable - Format Check

on:
  workflow_call:
    inputs:
      python-version:
        description: 'Python version to use'
        required: false
        type: string
        default: '3.11'
      ruff-config-path:
        description: 'Path to ruff config (relative to project root)'
        required: false
        type: string
        default: ''
      install-command:
        description: 'Command to install project dependencies'
        required: false
        type: string
        default: 'pip install -e ".[dev]"'

jobs:
  code-format-check:
    runs-on: ubuntu-latest
    name: Code Format Check
    
    steps:
    - name: Checkout project code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        repository: ${{ github.repository }}
    
    - name: Checkout shared CI scripts and configs
      uses: actions/checkout@v4
      with:
        repository: ${{ github.repository_owner }}/.github
        path: .ci-shared
        token: ${{ secrets.GITHUB_TOKEN }}
        sparse-checkout: |
          scripts
          configs
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        ${{ inputs.install-command }}
    
    - name: Determine ruff config path
      id: ruff-config
      run: |
        if [ -n "${{ inputs.ruff-config-path }}" ] && [ -f "${{ inputs.ruff-config-path }}" ]; then
          echo "config=${{ inputs.ruff-config-path }}" >> $GITHUB_OUTPUT
        else
          echo "config=.ci-shared/configs/ruff.toml" >> $GITHUB_OUTPUT
        fi
    
    - name: Get changed files
      id: changed-files
      run: |
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} > changed_files.txt
        else
          if [ "${{ github.event.before }}" != "0000000000000000000000000000000000000000" ]; then
            git diff --name-only ${{ github.event.before }}..${{ github.event.after }} > changed_files.txt
          else
            git ls-files > changed_files.txt
          fi
        fi
        
        if [ -s changed_files.txt ]; then
          CHANGED_FILES=$(cat changed_files.txt | tr '\n' ',' | sed 's/,$//')
          echo "files=$CHANGED_FILES" >> $GITHUB_OUTPUT
          echo "has_files=true" >> $GITHUB_OUTPUT
        else
          echo "has_files=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Run code format check
      if: steps.changed-files.outputs.has_files == 'true'
      run: |
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          python .ci-shared/scripts/code_format_helper.py \
            --start-rev ${{ github.event.pull_request.base.sha }} \
            --end-rev ${{ github.event.pull_request.head.sha }} \
            --changed-files "${{ steps.changed-files.outputs.files }}" \
            --py-style-config ${{ steps.ruff-config.outputs.config }}
        else
          if [ "${{ github.event.before }}" != "0000000000000000000000000000000000000000" ]; then
            python .ci-shared/scripts/code_format_helper.py \
              --start-rev ${{ github.event.before }} \
              --end-rev ${{ github.event.after }} \
              --changed-files "${{ steps.changed-files.outputs.files }}" \
              --py-style-config ${{ steps.ruff-config.outputs.config }}
          fi
        fi